description = "Movies adapter."

apply plugin: 'groovy'
apply plugin: 'spring-boot'

configurations {
  codeCoverage
}

processResources {
  filesMatching("**/*.properties") {
    expand(project.properties)
  }
}

dependencies {

  codeCoverage("org.jacoco:org.jacoco.agent:${jacocoVersion}:runtime@jar")

  compile project(':movies-model')
  compile "org.springframework.boot:spring-boot-starter-web"
  compile "org.springframework.boot:spring-boot-starter-actuator"

  compile "org.codehaus.groovy:groovy:${groovyVersion}"
  compile "org.codehaus.groovy:groovy-json:${groovyVersion}"
  compile 'org.hibernate:hibernate-validator:5.1.2.Final'
  compile 'cz.jirutka.validator:validator-collection:2.1.3'
  compile 'org.apache.httpcomponents:httpclient:4.3.5'
  compile "com.ryantenney.metrics:metrics-spring:${metricsSpringVersion}"
  compile 'org.springframework.retry:spring-retry:1.1.2.RELEASE'
  compile 'org.springframework:spring-oxm'
  compile 'org.aspectj:aspectjtools:1.8.6'

  compile 'org.springframework.boot:spring-boot-configuration-processor'

  testCompile "org.springframework.boot:spring-boot-starter-test"
  testCompile "info.cukes:cucumber-groovy:${cukesVersion}"
  testCompile "info.cukes:cucumber-junit:${cukesVersion}"
  testCompile "com.jayway.restassured:rest-assured:2.3.2"
  testCompile("org.spockframework:spock-core:${spockVersion}") {
    exclude group: 'org.codehaus.groovy', module: 'groovy-all'
  }
  testCompile "org.spockframework:spock-spring:${spockVersion}"

  testCompile 'cglib:cglib-nodep:3.1'

}

compileJava.dependsOn(processResources)

def serverProcess

task startServer(dependsOn: ['assemble']) << {
  Thread.start {
    def command = "java -Dserver.port=10876 -Dspring.profiles.active=mock -jar ${project.rootDir}/movies-adapter/build/libs/${project.name}-${project.version}.jar"
    println "Executing: ${command}"
    def process = "$command".execute();
    serverProcess = process
    process.in.eachLine { line ->
      println line
    }
  }
}

task stopServer << {
  println 'Stopping server process'
  serverProcess.destroy()
}

test {
  systemProperty "file.encoding", "UTF-8"
  systemProperty "java.awt.headless", "true"

  // JaCoCo uses an agent to do code coverage instrumentation on loading rather than instrumenting class files on disk
  // we set the jacoco property in case code needs to know that jacoco is active (otherwise some reflection tests fail)
  jvmArgs "-Djacoco=true",
    "-javaagent:$configurations.codeCoverage.singleFile=destfile=$buildDir/coverage-results/jacoco-unit.exec,append=false",
    "-XX:MaxPermSize=512m"

  getReports().getHtml().setDestination("$buildDir/reports/test-results/unit")
  getReports().getJunitXml().setDestination("$buildDir/reports/tests/unit")
}

task testAcceptanceLocal(dependsOn: ['compileTestGroovy', 'startServer']) << {
  checkStatus "http://localhost:10876/movies-adapter/status".toURL(), 5
  try {
    javaexec {
      main = "cucumber.api.cli.Main"
      classpath = sourceSets.test.runtimeClasspath
      args = ['-f', 'html:build/reports/tests/com.susu.movies.acceptance/com.susu.movies.local/html',
              '-f', 'json:build/reports/tests/com.susu.movies.acceptance/com.susu.movies.local/json/index.json',
              '--glue', 'src/test/groovy/com/susu/movies/acceptance', 'src/test/resources/features']
      jvmArgs = ['-Dapi.server.port=10876', '-Dapi.server.context=/movies-adapter']
    }
  } catch (Exception e) {
    println e.message
    println 'Stopping server process'
    serverProcess.destroy()
    throw e
  }

}

testAcceptanceLocal.finalizedBy stopServer